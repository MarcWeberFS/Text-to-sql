name: Build & Push Docker Images

on:
  push:
    branches: [ master ]

env:
  AWS_REGION: eu-central-2
  ECR_REGISTRY: 471112976468.dkr.ecr.eu-central-2.amazonaws.com

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push backend
        run: |
          docker build -t text-to-sql-backend ./text-to-sql
          docker tag text-to-sql-backend:latest $ECR_REGISTRY/text-to-sql-backend:latest
          docker push $ECR_REGISTRY/text-to-sql-backend:latest

      - name: Deploy backend (example, e.g. via ECS or manual run)
        run: |
          docker run -d \
            -e DB_URL=${{ secrets.DB_URL }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASS=${{ secrets.DB_PASS }} \
            -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            -e CLAUDE_API_KEY=${{ secrets.CLAUDE_API_KEY }} \
            -e GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} \
            -e DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }} \
            -e GROK_API_KEY=${{ secrets.GROK_API_KEY }} \
            $ECR_REGISTRY/text-to-sql-backend:latest

      - name: Build and push frontend
        run: |
          docker build -t text-to-sql-frontend ./text-to-sql-frontend
          docker tag text-to-sql-frontend:latest $ECR_REGISTRY/text-to-sql-frontend:latest
          docker push $ECR_REGISTRY/text-to-sql-frontend:latest

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: DB_URL,DB_USER,DB_PASS,OPENAI_API_KEY,CLAUDE_API_KEY,GEMINI_API_KEY,DEEPSEEK_API_KEY,GROK_API_KEY
          script: |
            docker stop backend frontend || true
            docker rm backend frontend || true

            aws ecr get-login-password --region eu-central-2 | docker login --username AWS --password-stdin 471112976468.dkr.ecr.eu-central-2.amazonaws.com

            docker pull 471112976468.dkr.ecr.eu-central-2.amazonaws.com/text-to-sql-backend:latest
            docker pull 471112976468.dkr.ecr.eu-central-2.amazonaws.com/text-to-sql-frontend:latest

            docker run -d \
              --name backend \
              -p 8080:8080 \
              -e DB_URL=${{ secrets.DB_URL }} \
              -e DB_USER=${{ secrets.DB_USER }} \
              -e DB_PASS=${{ secrets.DB_PASS }} \
              -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
              -e CLAUDE_API_KEY=${{ secrets.CLAUDE_API_KEY }} \
              -e GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} \
              -e DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }} \
              -e GROK_API_KEY=${{ secrets.GROK_API_KEY }} \
              471112976468.dkr.ecr.eu-central-2.amazonaws.com/text-to-sql-backend:latest

            docker run -d \
              --name frontend \
              -p 3000:80 \
              471112976468.dkr.ecr.eu-central-2.amazonaws.com/text-to-sql-frontend:latest


